clear
N = 100;
x0 = zeros(1,6);
r = [1 0 0 0 0 0];
x0 = [x0;r];
r = [r;x0];

T = 0.1;
A = [1 0 0 T 0 0;
    0 1 0 0 T 0;
    0 0 1 0 0 T;
    0 0 0 1 0 0;
    0 0 0 0 1 0;
    0 0 0 0 0 1];

B = [0 0 0;
    0 0 0;
    0 0 0;
    T 0 0;
    0 T 0;
    0 0 T];
graph = ones(2) - eye(2);

M = size(x0,1); % Number of agents
model.A = A;
model.B = B;
model.umax = 100;
model.umin = -100;

nx = size(model.A,1); %state vector dimension
nu = size(model.B,2); %number of inputs
Nd = 3; %number of dimensions

Q = eye(Nd)*10;
Objective.Q = blkdiag(Q,zeros(nx-Nd));
Objective.R = eye(nu)*13;
Objective.N = N;

constraints_struct = cell(M,1);
for i = 1:M
    constraints_struct{i}.r = r(i,:);
    constraints_struct{i}.x0 = x0(i,:);
    constraints_struct{i}.N_j = find(graph(i,:));
    constraints_struct{i}.delta = 0.5;
end




%% ADMM Vectors

ADMM_struct.rho = 40; %weighting of constraint violation
    
lambda = zeros(Nd,1); %Lagrangian variable
lambda_to_ = zeros(Nd,1); %used to construct lagrangians for each agent
lambda_from_ = zeros(Nd,1);
    
ADMM_struct.w = zeros(Nd*(N+1),1); %Will effectively be the proposed trajectory by one drone for another
ADMM_struct.x = zeros(nx*(N+1),1);
ADMM_struct.u = zeros(nu*N,1);

w_from_ = zeros(Nd,1);
w_to_ = zeros(Nd,1);
    
ADMM_struct.lambda = repmat(lambda, N+1, 1);
    
ADMM_struct.lambda_to_j = repmat(lambda_to_, N+1,size(constraints_struct{1}.N_j,2));
ADMM_struct.lambda_from_j = repmat(lambda_from_, N+1, size(constraints_struct{1}.N_j,2));
ADMM_struct.w_from_j = repmat(w_from_, N+1, size(constraints_struct{1}.N_j,2));
ADMM_struct.w_to_j = repmat(w_to_, N+1, size(constraints_struct{1}.N_j,2));

x_init = init_traj(ADMM_struct.rho,Objective,constraints_struct{1},model); %initial solution
x_init2 = init_traj(ADMM_struct.rho,Objective,constraints_struct{2},model);

ADMM_struct.x_bar = [x_init x_init2];

ADMM = Simulink.Bus;


fn = fieldnames(ADMM_struct);
for k = 1:numel(fn)
   elems(k) = Simulink.BusElement;
   elems(k).Name = fn{k};
   elems(k).Dimensions = size(ADMM_struct.(fn{k}));
end

ADMM.Elements = elems;

constraints = Simulink.Bus;
fn = fieldnames(constraints_struct{1});

for k = 1:numel(fn)
   con_elems(k) = Simulink.BusElement;
   con_elems(k).Name = fn{k};
   con_elems(k).Dimensions = size(constraints_struct{1}.(fn{k}));
   if fn{k} == 'N_'
end

constraints.Elements = con_elems;